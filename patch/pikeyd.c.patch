--- ../../pikeyd/pikeyd.c	2021-04-28 11:14:37.814338392 -0400
+++ pikeyd.c	2021-04-14 06:56:38.346567202 -0400
@@ -25,70 +25,88 @@
 
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <stdbool.h>
+
 #include "joy_RPi.h"
-#include "iic.h"
+
+
+#include <bcm2835.h>
+#include "gpio_joystick.h"
+
+#define HC165JOY 1
+
 
 static void showHelp(void);
 static void showVersion(void);
 
+bool no_key_debounce = false;
+bool skip_mouse_init = false;
+
 int main(int argc, char *argv[])
 {
-  int en_daemonize = 0;
+
+
   int i;
+  
+  if(argc>1){
 
-  for(i=1; i<argc; i++){
+  for (i = 1; i < argc; i++) {
     if(!strcmp(argv[i], "-d")){
-      en_daemonize = 1;
-      //daemonize("/tmp", "/tmp/pikeyd.pid");
+      daemonize("/tmp", "/tmp/pikeyd.pid");
     }
-    if(!strcmp(argv[i], "-k")){
+    else if(!strcmp(argv[i], "-k")){
       daemonKill("/tmp/pikeyd.pid");
       exit(0);
     }
-    if(!strcmp(argv[i], "-r")){
-      joy_enable_repeat();
-    }
-    if(!strcmp(argv[i], "-v")){
+    else if(!strcmp(argv[i], "-v")){
       showVersion();
       exit(0);
     }
-    if(!strcmp(argv[i], "-h")){
+    else if(!strcmp(argv[i], "-h")){
       showHelp();
       exit(0);
     }
+    else if(!strcmp(argv[i], "-smi")){
+      printf("mouse disabled\n");
+      skip_mouse_init = true;
+    }
+    else if(!strcmp(argv[i], "-ndb")){
+      printf("no key debounce\n");
+      no_key_debounce = true;
+    }
+    
+  }        
   }
 
-  if(en_daemonize){
-    daemonize("/tmp", "/tmp/pikeyd.pid");
-  }
+  
+  
 
-  init_iic();
-  init_config();
 
-  //test_config(); exit(0);
 
-  //test_iic(0x20);  close_iic();  exit(0);
+  
+  init_config();
+  //test_config(); exit(0);
 
-  //printf("init uinput\n");
+  printf("init uinput\n");
 
-  if(init_uinput() == 0){
+  if(init_uinput(skip_mouse_init) == 0){
     sleep(1);
     //test_uinput();
-    if(joy_RPi_init()>=0){
 
-      if(!en_daemonize){
-	printf("Press ^C to exit.\n");
-      }
+
+    if(joy_RPi_init()>=0){
 
       for(;;){
 	joy_RPi_poll();
-	usleep(4000);
+	usleep(4000);	
       }
 
       joy_RPi_exit();
     }
 
-    close_uinput();
+    close_uinput(skip_mouse_init);
   }
 
   return 0;
@@ -97,19 +115,27 @@
 static void showHelp(void)
 {
   printf("Usage: pikeyd [option]\n");
+
   printf("Options:\n");
   printf("  -d    run as daemon\n");
-  printf("  -r    force key repeats\n");
   printf("  -k    try to terminate running daemon\n");
   printf("  -v    version\n");
+  printf("  -smi  skip mouse initialisation, no mouse/trackball devices are created\n");
+  printf("  -ndb  no key debounce \n");
   printf("  -h    this help\n");
 }
 
 static void showVersion(void)
 {
-  printf("pikeyd 1.3 (May 2013)\n");
+  printf("\npikeyd - 2017 \n");
   printf("The Universal Raspberry Pi GPIO keyboard daemon.\n");
   printf("Copyright (C) 2013 Michael Moller.\n");
   printf("This is free software; see the source for copying conditions.  There is NO\n");
-  printf("warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n");
+  printf("warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n");
+
+  printf("This version of pikeyd is heavily modified for use with the pi2jamma hardware. \n");
+  printf("Input is read via gpio bitstream, it supports 24 buttons, 2 Trackballs and 4 analog channels \n\n");
+  printf("Buildinfo:\n",BDATE);
+  printf("build directory: %s\n",BVERSION);
+  printf("build date: %s\n\n",BDATE);
 }
