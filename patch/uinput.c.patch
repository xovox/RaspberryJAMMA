--- ../../pikeyd/uinput.c	2021-04-28 11:14:37.814338392 -0400
+++ uinput.c	2021-04-14 06:56:38.346567202 -0400
@@ -33,21 +33,27 @@
 #include <linux/uinput.h>
 #include "config.h"
 #include "daemon.h"
+#include "time.h"
 #include "uinput.h"
+#include <stdbool.h>
 
-static int sendRel(int dx, int dy);
-static int sendSync(void);
+int sendKey(int key, int value);
+int sendRel(int devm, int dx, int dy);
+static int sendSync(int);
 
 static struct input_event     uidev_ev;
-static int uidev_fd;
-static keyinfo_s lastkey;
+static int uidev_fd_key;
+int uidev_fd_mouse1;
+int uidev_fd_mouse2;
+
+
 
 #define die(str, args...) do { \
         perror(str); \
         return(EXIT_FAILURE); \
     } while(0)
 
-int init_uinput(void)
+int init_uinput(bool skip_mouse_init)
 {
   int fd;
   struct uinput_user_dev uidev;
@@ -59,11 +65,96 @@
 
   if(ioctl(fd, UI_SET_EVBIT, EV_KEY) < 0)
     die("error: ioctl");
+
   if(ioctl(fd, UI_SET_EVBIT, EV_REP) < 0)
     die("error: ioctl");
-  if(ioctl(fd, UI_SET_KEYBIT, BTN_LEFT) < 0)
+
+
+  //alter code (mouse im keydevice)  
+#if 0  
+    if( skip_mouse_init == false) {
+    if(ioctl(fd, UI_SET_KEYBIT, BTN_LEFT) < 0)
+      die("error: ioctl");
+    
+       if(ioctl(fd, UI_SET_EVBIT, EV_REL) < 0)
+       die("error: ioctl");
+     if(ioctl(fd, UI_SET_RELBIT, REL_X) < 0)
+       die("error: ioctl");
+     if(ioctl(fd, UI_SET_RELBIT, REL_Y) < 0)
+       die("error: ioctl");
+     }
+#endif
+  
+  /* don't forget to add all the keys! */
+  for(i=0; i<256; i++){
+    if(ioctl(fd, UI_SET_KEYBIT, i) < 0)
+      die("error: ioctl");
+  }
+
+  memset(&uidev, 0, sizeof(uidev));
+  snprintf(uidev.name, UINPUT_MAX_NAME_SIZE, "uinput-sample0");
+  uidev.id.bustype = BUS_USB;
+  uidev.id.vendor  = 0x1;
+  uidev.id.product = 0x1;
+  uidev.id.version = 1;
+
+  if(write(fd, &uidev, sizeof(uidev)) < 0)
+    die("error: write");
+
+  if(ioctl(fd, UI_DEV_CREATE) < 0)
     die("error: ioctl");
 
+  uidev_fd_key = fd;
+
+
+
+  
+
+ /******************mouses******************/
+
+  if( skip_mouse_init == false) {
+
+  printf("Mouse/Trackball enabled\n");
+
+  //mouse 1
+  fd = open("/dev/uinput", O_WRONLY | O_NONBLOCK);
+  if(fd < 0)
+    die("/dev/uinput");
+
+
+  //    if(ioctl(fd, UI_SET_KEYBIT, BTN_LEFT) < 0)
+  //    die("error: ioctl");
+
+    if(ioctl(fd, UI_SET_EVBIT, EV_REL) < 0)
+      die("error: ioctl");
+    if(ioctl(fd, UI_SET_RELBIT, REL_X) < 0)
+      die("error: ioctl");
+    if(ioctl(fd, UI_SET_RELBIT, REL_Y) < 0)
+      die("error: ioctl");
+  
+  memset(&uidev, 0, sizeof(uidev));
+  snprintf(uidev.name, UINPUT_MAX_NAME_SIZE, "uinput-sample1");
+  uidev.id.bustype = BUS_USB;
+  uidev.id.vendor  = 0x1;
+  uidev.id.product = 0x1;
+  uidev.id.version = 1;
+
+  if(write(fd, &uidev, sizeof(uidev)) < 0)
+    die("error: write");
+
+  if(ioctl(fd, UI_DEV_CREATE) < 0)
+    die("error: ioctl");
+
+  uidev_fd_mouse1 = fd;
+
+  //mouse 2
+  fd = open("/dev/uinput", O_WRONLY | O_NONBLOCK);
+  if(fd < 0)
+    die("/dev/uinput");
+
+  //    if(ioctl(fd, UI_SET_KEYBIT, BTN_LEFT) < 0)
+  //    die("error: ioctl");
+
   if(ioctl(fd, UI_SET_EVBIT, EV_REL) < 0)
     die("error: ioctl");
   if(ioctl(fd, UI_SET_RELBIT, REL_X) < 0)
@@ -71,14 +162,8 @@
   if(ioctl(fd, UI_SET_RELBIT, REL_Y) < 0)
     die("error: ioctl");
 
-  /* don't forget to add all the keys! */
-  for(i=0; i<256; i++){
-    if(ioctl(fd, UI_SET_KEYBIT, i) < 0)
-      die("error: ioctl");
-  }
-
   memset(&uidev, 0, sizeof(uidev));
-  snprintf(uidev.name, UINPUT_MAX_NAME_SIZE, "uinput-sample");
+  snprintf(uidev.name, UINPUT_MAX_NAME_SIZE, "uinput-sample2");
   uidev.id.bustype = BUS_USB;
   uidev.id.vendor  = 0x1;
   uidev.id.product = 0x1;
@@ -90,8 +175,21 @@
   if(ioctl(fd, UI_DEV_CREATE) < 0)
     die("error: ioctl");
 
-  uidev_fd = fd;
+  uidev_fd_mouse2 = fd;
+
+
+  
+  }
+ /******************mouses******************/
+
+
+
+
 
+
+
+
+  
   return 0;
 }
 
@@ -128,7 +226,7 @@
     for(i = 0; i < 20; i++) {
       //sendKey(KEY_D, 1);
       //sendKey(KEY_D, 0);
-      sendRel(dx, dy);
+      sendRel(uidev_fd_mouse1,dx, dy);
 
       usleep(15000);
     }
@@ -137,15 +235,36 @@
   }
 }
 
-int close_uinput(void)
+int close_uinput(bool skip_mouse_init)
 {
   sleep(2);
 
-  if(ioctl(uidev_fd, UI_DEV_DESTROY) < 0)
+  if(ioctl(uidev_fd_key, UI_DEV_DESTROY) < 0)
+    die("error: ioctl");
+
+  close(uidev_fd_key);
+
+
+/******************mouses******************/
+  if( skip_mouse_init == false) {
+
+  if(ioctl(uidev_fd_mouse1, UI_DEV_DESTROY) < 0)
+    die("error: ioctl");
+
+  close(uidev_fd_mouse1);
+
+
+  if(ioctl(uidev_fd_mouse2, UI_DEV_DESTROY) < 0)
     die("error: ioctl");
 
-  close(uidev_fd);
+  close(uidev_fd_mouse2);
+  }
+
+  
+/******************mouses******************/
 
+
+  
   return 0;
 }
 
@@ -155,44 +274,50 @@
   gettimeofday(&uidev_ev.time, NULL);
   uidev_ev.type = EV_KEY;
   uidev_ev.code = key;
+
+  //CM sanity fix
+  if(value!=0)
+    value=1;
+  
   uidev_ev.value = value;
-  //printf("sendKey: %d = %d\n", key, value);
-  if(write(uidev_fd, &uidev_ev, sizeof(struct input_event)) < 0)
+  if(write(uidev_fd_key, &uidev_ev, sizeof(struct input_event)) < 0)
     die("error: write");
 
-  sendSync();
+  sendSync(uidev_fd_key);
 
   return 0;
 }
 
-static int sendRel(int dx, int dy)
+int sendRel(int devm,int dx, int dy)
 {
+  //printf("dx: %i dy: %i\n",dx,dy);
+
   memset(&uidev_ev, 0, sizeof(struct input_event));
   uidev_ev.type = EV_REL;
   uidev_ev.code = REL_X;
   uidev_ev.value = dx;
-  if(write(uidev_fd, &uidev_ev, sizeof(struct input_event)) < 0)
+  if(write(devm, &uidev_ev, sizeof(struct input_event)) < 0)
     die("error: write");
-
+  
   memset(&uidev_ev, 0, sizeof(struct input_event));
   uidev_ev.type = EV_REL;
   uidev_ev.code = REL_Y;
   uidev_ev.value = dy;
-  if(write(uidev_fd, &uidev_ev, sizeof(struct input_event)) < 0)
+  if(write(devm, &uidev_ev, sizeof(struct input_event)) < 0)
     die("error: write");
 
-  sendSync();
+  sendSync(devm);
 
   return 0;
 }
 
-static int sendSync(void)
+static int sendSync(int devm)
 {
   //memset(&uidev_ev, 0, sizeof(struct input_event));
   uidev_ev.type = EV_SYN;
   uidev_ev.code = SYN_REPORT;
   uidev_ev.value = 0;
-  if(write(uidev_fd, &uidev_ev, sizeof(struct input_event)) < 0)
+  if(write(devm, &uidev_ev, sizeof(struct input_event)) < 0)
     die("error: sendSync - write");
 
   return 0;
@@ -201,30 +326,14 @@
 int send_gpio_keys(int gpio, int value)
 {
   int k;
-  int xio;
   restart_keys();
   while( got_more_keys(gpio) ){
     k = get_next_key(gpio);
-    if(is_xio(gpio) && value){ /* xio int-pin is active low */
-      xio = get_curr_xio_no();
-      poll_iic(xio);
-      last_iic_key(&lastkey);
-    }
-    else if(k<0x300){
-      sendKey(k, value);
-      if(value && got_more_keys(gpio)){
-	/* release the current key, so the next one can be pressed */
-	sendKey(k, 0);
-      }
-      lastkey.key = k;
-      lastkey.val = value;
+    sendKey(k, value);
+    if(value && got_more_keys(gpio)){
+      /* release the current key, so the next one can be pressed */
+      sendKey(k, 0);
     }
   }
   return k;
 }
-
-void get_last_key(keyinfo_s *kp)
-{
-  kp->key = lastkey.key;
-  kp->val = lastkey.val;
-}
