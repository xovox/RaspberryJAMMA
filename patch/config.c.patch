--- ../../pikeyd/config.c	2021-04-28 11:14:37.806338285 -0400
+++ config.c	2021-04-14 06:56:38.346567202 -0400
@@ -27,160 +27,116 @@
 #include <stdlib.h>
 #include <string.h>
 #include "config.h"
-#include "iic.h"
-#include "joy_RPi.h"
 
 #define NUM_GPIO 32
 #define MAX_LN 128
-#define MAX_XIO_DEVS 8
-#define MAX_XIO_PINS 8
+
 
 extern key_names_s key_names[];
 
+
+key_special_s KEY_SPECIAL[20];
+
+
+
+
+
 typedef struct _gpio_key{
   int gpio;
   int idx;
   int key;
-  int xio; /* -1 for direct gpio */
   struct _gpio_key *next;
 }gpio_key_s;
 
-/* each I/O expander can have 8 pins */
-typedef struct{
-  char name[20];
-  iodev_e type;
-  int addr;
-  int regno;
-  int inmask;
-  int lastvalue;
-  gpio_key_s *last_key;
-  gpio_key_s *key[8];
-}xio_dev_s;
 
 static int find_key(const char *name);
-static void add_event(gpio_key_s **ev, int gpio, int key, int xio);
+static void add_event(gpio_key_s **ev, int gpio, int key);
 static gpio_key_s *get_event(gpio_key_s *ev, int idx);
-static int find_xio(const char *name);
-static void setup_xio(int xio);
 
 static gpio_key_s *gpio_key[NUM_GPIO];
 static gpio_key_s *last_gpio_key = NULL;
 static int gpios[NUM_GPIO];
 static int num_gpios_used=0;
-static xio_dev_s xio_dev[MAX_XIO_DEVS];
-static int xio_count = 0;
 
 static int SP;
-static keyinfo_s KI;
+
+#define SET_BIT(var,pos) ((var) | (1<<(pos)))
 
 int init_config(void)
 {
-  int i,j,k,n;
+  int i,k,n;
   FILE *fp;
   char ln[MAX_LN];
-  int lnno = 0;
-  char name[32], xname[32];
+  char name[32];
   char conffile[80];
-  int gpio,caddr,regno;
-
+  int gpio;
+  int idx;
+  int a,b,c,d,e;
+  
   for(i=0;i<NUM_GPIO;i++){
     gpio_key[i] = NULL;
   }
 
-  /* search for the conf file in ~/.pikeyd.conf and /etc/pikeyd.conf */
-  sprintf(conffile, "%s/.pikeyd.conf", getenv("HOME"));
+  /* search for the conf file in ~/.piked.conf and /etc/pikeyd165.conf */
+  sprintf(conffile, "%s/.pikeyd165.conf", getenv("HOME"));
   fp = fopen(conffile, "r");
   if(!fp){
-    fp = fopen("/etc/pikeyd.conf", "r");
+    fp = fopen("/etc/pikeyd165.conf", "r");
     if(!fp){
       perror(conffile);
-      perror("/etc/pikeyd.conf");
+      perror("/etc/pikeyd165.conf");
     }
-    sprintf(conffile, "/etc/pikeyd.conf");
+    sprintf(conffile, "/etc/pikeyd165.conf");
   }
   if(fp){
     printf("Config file is %s\n", conffile);
   }
 
+  idx=0;
   while(fp && !feof(fp)){
     if(fgets(ln, MAX_LN, fp)){
-      lnno++;
       if(strlen(ln) > 1){
 	if(ln[0]=='#')continue;
-	n=sscanf(ln, "%s %d", name, &gpio);
+	a=b=c=d=e=-1;
+	n=sscanf(ln, "%s %d %d %d %d %d", name, &gpio, &b, &c, &d, &e);
 	if(n>1){
 	  k = find_key(name);
 	  if(k){
-	    //printf("%d %04x:[%s] = %d/%d (%d)\n",lnno, k,name, gpio, n, key_names[k].code);
-	    if(key_names[k].code < 0x300){
-	      SP=0;
-	      add_event(&gpio_key[gpio], gpio, key_names[k].code, -1);
-	    }
-	  }
-	  /* expander declarations start with "XIO" */
-	  else if(strstr(ln, "XIO") == ln){
-	    n=sscanf(ln, "%s %d/%i/%s", name, &gpio, &caddr, xname);
-	    if(n > 2){
-	      //printf("%d XIO entry: %s %d %02x %s\n", lnno, name, gpio, caddr, xname);
-	      strncpy(xio_dev[xio_count].name, name, 20);
-	      xio_dev[xio_count].addr = caddr;
-	      xio_dev[xio_count].last_key = NULL;
-	      xio_dev[xio_count].lastvalue = 0xff;
-	      for(i=0;i<8;i++){
-		xio_dev[xio_count].key[i] = NULL;
-	      }
-	      if( !strncmp(xname, "MCP23008", 8) ){
-		xio_dev[xio_count].type = IO_MCP23008;
-		xio_dev[xio_count].regno = 0x09;
-	      }
-	      else if( !strncmp(xname, "MCP23017A", 9) ){
-		xio_dev[xio_count].type = IO_MCP23017A;
-		xio_dev[xio_count].regno = 0x09;
-	      }
-	      else if( !strncmp(xname, "MCP23017B", 9) ){
-		xio_dev[xio_count].type = IO_MCP23017B;
-		xio_dev[xio_count].regno = 0x19;
-	      }
-	      else{
-		xio_dev[xio_count].type = IO_UNK;
-		xio_dev[xio_count].regno = 0;
+	    if(n==2)
+	      {
+	       //printf("[%s] = %d (%d)\n",name, gpio, key_names[k].code);
+	       SP=0;
+	       add_event(&gpio_key[gpio], gpio, key_names[k].code);
 	      }
+	    else
+	      {
+		a=gpio;
+		//printf("%i %i %i %i %i\n",a,b,c,d,e);
+		KEY_SPECIAL[idx].pressed=0;
+		KEY_SPECIAL[idx].key=k;
+		if(a>0) KEY_SPECIAL[idx].bits |= 1 << a;
+		if(b>0) KEY_SPECIAL[idx].bits |= 1 << b;
+		if(c>0) KEY_SPECIAL[idx].bits |= 1 << c;
+		if(d>0) KEY_SPECIAL[idx].bits |= 1 << d;
+		if(e>0) KEY_SPECIAL[idx].bits |= 1 << e;				    				   		    
 
-	      add_event(&gpio_key[gpio], gpio, 0, xio_count);
-	      xio_count++;
-	      xio_count %= 16;
-	    }
-	  }
-	  else{
-	    printf("Line %d. Unknown entry (%s)\n", lnno, ln);
-	  }
-	}
-	else if(n>0){ /* I/O expander pin-entries */
-	  n=sscanf(ln, "%s %[^:]:%i", name, xname, &gpio);
-	  if(n>2){
-	    //printf("%d XIO event %s at (%s):%d\n", lnno, name, xname, gpio);
-	    if( (n = find_xio(xname)) >= 0 ){
-	      k = find_key(name);
-	      if(k){
-		add_event(&xio_dev[n].key[gpio], gpio, key_names[k].code, -1);
-		//printf(" Added event %s on %s:%d\n", name, xname, gpio);
+		idx++;
 	      }
-	    }
-	    else{
-	      printf("Line %d. No such expander: %s\n", lnno, xname);
-	    }
+	     }
 	  }
-	  else{
-	    printf("Line %d. Bad entry (%s)\n", lnno, ln);
-	  }
-	}
-	else{
-	  printf("Line %d. Too few arguments (%s)\n", lnno, ln);
 	}
       }
     }
-  }
+ 
+  KEY_SPECIAL[idx].key=0;
+  KEY_SPECIAL[idx].bits=0;
 
+
+  for(idx=0; KEY_SPECIAL[idx].key!=0 && KEY_SPECIAL[idx].bits!=0 ; idx++)
+   {
+     printf("%i %08x\n", KEY_SPECIAL[idx].key,KEY_SPECIAL[idx].bits);
+   }
+  
   if(fp){
     fclose(fp);
   }
@@ -194,36 +150,9 @@
   }
   num_gpios_used = n;
 
-  for(j=0;j<xio_count;j++){
-    for(i=0;i<8;i++){
-      if(xio_dev[j].key[i]){
-	xio_dev[j].inmask |= 1<<i;
-      }
-    }
-    setup_xio(j);
-    test_iic(xio_dev[j].addr, xio_dev[j].regno & 0x10);
-  }
-
-  printf("Polling %d GPIO pin(s).\n", num_gpios_used);
-  printf("Found %d I/O expander(s).\n", xio_count);
-  printf("Ready.\n");
-
   return 0;
 }
 
-static int find_xio(const char *name)
-{
-  int i=0;
-  while(i<xio_count){
-    if(!strncmp(xio_dev[i].name, name, 32))break;
-    i++;
-  }
-  if(i >= xio_count){
-    i = -1;
-  }
-  return i;
-}
-
 static int find_key(const char *name)
 {
   int i=0;
@@ -231,18 +160,15 @@
     if(!strncmp(key_names[i].name, name, 32))break;
     i++;
   }
-  if(key_names[i].code < 0){
-    i = 0;
-  }
   return i;
 }
 
-static void add_event(gpio_key_s **ev, int gpio, int key, int xio)
+static void add_event(gpio_key_s **ev, int gpio, int key)
 {
   if(*ev){
     SP++;
     /* Recursive call to add the next link in the list */
-    add_event(&(*ev)->next, gpio, key, xio);
+    add_event(&(*ev)->next, gpio, key);
   }
   else{
     *ev = malloc(sizeof(gpio_key_s));
@@ -253,7 +179,6 @@
       (*ev)->gpio = gpio;
       (*ev)->idx = SP;
       (*ev)->key = key;
-      (*ev)->xio = xio;
       (*ev)->next = NULL;
     }
   }
@@ -302,15 +227,6 @@
     last_gpio_key = NULL;
 }
 
-int get_curr_key(void)
-{
-  int r=0;
-  if(last_gpio_key){
-    r=last_gpio_key->key;
-  }
-  return r;
-}
-
 int get_next_key(int gpio)
 {
   static int lastgpio=-1;
@@ -373,157 +289,3 @@
 {
   return gpios[n % NUM_GPIO];
 }
-
-int is_xio(int gpio)
-{
-  int r=0;
-  if( gpio_key[gpio] && (gpio_key[gpio]->xio >= 0) ){
-    r=1;
-  }
-  return r;
-}
-
-static void setup_xio(int xio)
-{
-  char cfg_dat[]={
-    0xff, //IODIR
-    0x00, //IPOL
-    xio_dev[xio].inmask,  //GPINTEN - enable interrupts for defined pins
-    0x00, //DEFVAL
-    0x00, //INTCON - monitor changes
-    0x84, //IOCON - interrupt pin is open collector;
-    0xff, //GPPU - enable all pull-ups
-  };
-  char buf[]={0x84};
-  int addr = xio_dev[xio].addr;
-
-  /* first ensure that the bank bit is set */
-  if( write_iic(addr, 0x0a, buf, 1) < 0 ){
-    perror("iic init write 1\n");
-  }
-  buf[0]=0; /* reset OLATA if incorrectly addressed before */
-  if( write_iic(addr, 0x0a, buf, 1) < 0 ){
-    perror("iic init write 2\n");
-  }
-
-  switch(xio_dev[xio].type){
-  case IO_MCP23008:
-    write_iic(addr, 0, cfg_dat, 7); 
-    printf("Configuring MCP23008\n");
-    break;
-  case IO_MCP23017A:
-    write_iic(addr, 0, cfg_dat, 7); 
-    printf("Configuring MCP23017 port A\n");
-    break;
-  case IO_MCP23017B:
-    write_iic(addr, 0x10, cfg_dat, 7); 
-    printf("Configuring MCP23017 port B\n");
-    break;
-  default:
-    break;
-  }
-}
-
-int get_curr_xio_no(void)
-{
-  int n;
-  int r = -1;
-  if(last_gpio_key){
-    n=last_gpio_key->xio;
-    if(n>=0){
-      r = n;
-    }
-  }
-  return r;
-}
-
-void get_xio_parm(int xio, iodev_e *type, int *addr, int *regno)
-{
-  *type = xio_dev[xio].type;
-  *addr = xio_dev[xio].addr;
-  *regno = xio_dev[xio].regno;
-}
-
-int got_more_xio_keys(int xio, int gpio)
-{
-  if( xio_dev[xio].last_key == NULL ){
-    return (xio_dev[xio].key[gpio] != NULL);
-  }
-  else if( xio_dev[xio].last_key->next == NULL){
-    return 0;
-  }
-  else{
-    return 1;
-  }
-}
-
-int get_next_xio_key(int xio, int gpio)
-{
-  static int lastgpio=-1;
-  static int idx = 0;
-  gpio_key_s *ev;
-  int k;
-
-  ev = xio_dev[xio].last_key;
-  if( (ev == NULL) || (gpio != lastgpio) ){
-    /* restart at the beginning after reaching the end, or reading a new gpio */
-    ev = xio_dev[xio].key[gpio];
-    lastgpio = gpio;
-  }
-  else{
-    /* get successive events while retrieving the same gpio */
-    ev = xio_dev[xio].last_key->next;
-  }
-  xio_dev[xio].last_key = ev;
-
-  if(ev){
-    k = ev->key;
-  }
-  else{
-    k = 0;
-  }
-  return k;
-}
-
-void restart_xio_keys(int xio)
-{
-    xio_dev[xio].last_key = NULL;
-}
-
-void handle_iic_event(int xio, int value)
-{
-  int ival = value & xio_dev[xio].inmask;
-  int xval = ival ^ xio_dev[xio].lastvalue;
-  int f,i,k=0,x;
-
-  xio_dev[xio].lastvalue = ival;
-
-  for (i = 0; i < MAX_XIO_PINS; i++){
-    restart_xio_keys(xio);
-    while(got_more_xio_keys(xio, i)){
-      k = get_next_xio_key(xio, i);
-      x = !(ival & (1 << i)); /* is the pin high or low? */
-      f = xval & (1 << i); /* has the pin changed? */
-      if(f){
-	//printf("(%02x) sending %d/%d: %x=%d\n", ival, xio, i, k, x);
-	sendKey(k, x); /* switch is active low */
-	KI.key = k; KI.val = x;
-	if(x && got_more_xio_keys(xio, i)){
-	  /* release the current key, so the next one can be pressed */
-	  //printf("sending %x=%d\n", k,x);
-	  sendKey(k, 0);
-	}
-      }
-    }
-    //printf("Next pin\n");
-  }
-  //printf("handler exit\n");
-}
-
-void last_iic_key(keyinfo_s *kp)
-{
-  kp->key = KI.key;
-  kp->val = KI.val;
-}
-
-
